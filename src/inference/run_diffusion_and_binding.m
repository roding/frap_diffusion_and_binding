%% Initialization.
clear
clc
close all hidden

%% Load data.
load('simulated_data_zero_noise.mat');
number_of_pixels = size(image_data_post_bleach, 1);

number_of_post_bleach_images = 10;
image_data_post_bleach = image_data_post_bleach(:, :, 1:number_of_post_bleach_images);

%% Add noise.
sigma_noise = 0.1;
image_data_post_bleach = image_data_post_bleach + sigma_noise * randn(size(image_data_post_bleach));

%% Parameter estimation pre-work.

% Set parameter bounds for first estimation.
lb_1 = [0, 0, 0]; % mobile_fraction, intensity_inside_bleach_region, intensity_outside_bleach_region
ub_1 = [1, 1, 1];

% Initial guess for first estimation.
param_hat_1 = [0.8, 0.5, 0.9];

% Set parameter bounds for second estimation.
lb_2_SI = [1e-10, 0, 0];
ub_2_SI = [1e-9, 10, 10];

lb_2 = lb_2_SI;
lb_2(1) = lb_2(1) / pixel_size^2;
ub_2 = ub_2_SI;
ub_2(1) = ub_2(1) / pixel_size^2;

% Initial guess for second estimation.
param_hat_2_SI = [2.5e-10, 0.5, 0.5];
param_hat_2 = param_hat_2_SI;
param_hat_2(1) = param_hat_2(1) / pixel_size^2;

%% Least-squares optimization.

options = optimoptions(@lsqnonlin);
options.Algorithm = 'trust-region-reflective';
options.Display = 'iter';
options.FunctionTolerance = 1e-6;
options.OptimalityTolerance = 1e-6;
options.StepTolerance = 1e-6;

[image_data_post_bleach_model_unscaled, initial_condition_model_unscaled] = signal_diffusion_and_binding(param_hat_2(1), ...
                                                                                    param_hat_2(2), ...
                                                                                    param_hat_2(3), ...
                                                                                    1.0, ...
                                                                                    x_bleach, ...
                                                                                    y_bleach, ...
                                                                                    r_bleach, ...
                                                                                    0.5, ...
                                                                                    1.0, ...
                                                                                    delta_t, ...
                                                                                    number_of_time_points_fine_per_coarse, ...
                                                                                    number_of_pixels, ...
                                                                                    number_of_post_bleach_images, ...
                                                                                    number_of_pad_pixels);
fun_1 = @(param)residual_diffusion_and_binding_2(   param(1), ...
                                                    param(2), ...
                                                    param(3), ...
                                                    image_data_post_bleach, ...
                                                    image_data_post_bleach_model_unscaled, ...
                                                    initial_condition_model_unscaled);
                                                
[param_hat_1, ss_1] = lsqnonlin(fun_1, param_hat_1, lb_1, ub_1, options)
fun_2 = @(param)residual_diffusion_and_binding_1(   param(1), ...
                                                    param(2), ...
                                                    param(3), ...
                                                    param_hat_1(1), ...
                                                    x_bleach, ...
                                                    y_bleach, ...
                                                    r_bleach, ...
                                                    param_hat_1(2), ...
                                                    param_hat_1(3), ...
                                                    delta_t, ...
                                                    number_of_time_points_fine_per_coarse, ...
                                                    number_of_pad_pixels, ...
                                                    image_data_post_bleach);
                                                
[param_hat_2, ss_2] = lsqnonlin(fun_2, param_hat_2, lb_2, ub_2, options)



                                                
%% Global optimization.
% fun = @(param)sum ( residual_diffusion_and_binding( param(1), ...
%                                                     param(2), ...
%                                                     param(3), ...
%                                                     param(4), ...
%                                                     x_bleach, ...
%                                                     y_bleach, ...
%                                                     param(5), ...
%                                                     param(6), ...
%                                                     param(7), ...
%                                                     delta_t, ...
%                                                     number_of_time_points_fine_per_coarse, ...
%                                                     number_of_pad_pixels, ...
%                                                     image_data_post_bleach).^2 );
% fun = @(param)sum ( residual_diffusion_and_binding( param(1), ...
%                                                     param(2), ...
%                                                     param(3), ...
%                                                     mobile_fraction, ...
%                                                     x_bleach, ...
%                                                     y_bleach, ...
%                                                     r_bleach, ...
%                                                     intensity_inside_bleach_region, ...
%                                                     intensity_outside_bleach_region, ...
%                                                     delta_t, ...
%                                                     number_of_time_points_fine_per_coarse, ...
%                                                     number_of_pad_pixels, ...
%                                                     image_data_post_bleach).^2 );
% delete(gcp('nocreate'))
% c = parcluster('local');
% c.NumWorkers = 8;
% parpool(c, c.NumWorkers);
% options = psoptimset(@patternsearch);
% options.Display = 'iter';
% options.UseParallel = true;
% [param_hat, ss] = patternsearch(fun, param_guess, [], [], [], [], lb, ub, [], options);

% options = saoptimset('simulannealbnd');
% options.Display = 'iter';
% options.ObjectiveLimit = 0;
% options.DisplayInterval = 1;
% options.TimeLimit = Inf;
% [param_hat, ss] = simulannealbnd(fun, param_guess, lb, ub, options);





